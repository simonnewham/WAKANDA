The context free grammar

@the start symbol
Program -> execute lround rround lcurly Statements rcurly

Statements -> Statement Statements

Statement -> Assignment
			| IfStatement
			| PrintStatement
			| Statement Statement

??DONT NEED
Assignment -> identifier equals  Expression
			 | identifier equals stringLit
			 | identifier equals intLiteral
			 | identifier equals floatLiteral

Expression -> Expression plus Term
			 | Expression minus Term
			 | Term

Term -> Term multiply Factor
		| Term divide Factor
		| Factor

Factor -> lround Expression rround
		  | numLiteral
		  | identifier
		  | floatLiteral

PrintStatement -> print lround stringLit rround
				| print lround identifier rround
				| print lround numLiteral rround
				| print lround floatLiteral rround


IfStatement -> if lround BoolCond rround lcurly Statement rcurly otherwise lcurly Statement rcurly

BoolCond ->  identifier leq intLiteral
		  | identifier geq intLiteral
		  | intLiteral leq identifier
		  | intLiteral geq identifier
		  | identifier leq identifier
		  | identifier geq identifier
		  | identifier leq floatLiteral
		  | identifier geq floatLiteral
		  | floatLiteral leq identifier
		  | floatLiteral geq identifier
