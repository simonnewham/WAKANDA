The context free grammar
@the start symbol
Program -> execute lround rround lcurly Statements rcurly

Statements -> Statement Statements

Statement -> Assignment
			| IfStatement
			| PrintStatement
			| Statement Statement

Assignment -> nums identifier equals Expression
			 | nums identifier equals intLiteral
			 | float identifier equals Expression
			 | float identifier equals floatLiteral

Expression -> Term plus Expression
			 | Term minus Expression
			 | Term

Term -> Factor multiply Term 
		| Factor divide Term 
		| Factor

Factor -> lround Expression rround
		  | numLiteral
		  | identifier
		  | floatLiteral

PrintStatement -> print lround stringLit rround
				| print lround identifier rround
				| print lround numLiteral rround
				| print lround floatLiteral rround


IfStatement -> if lround BoolCond rround lcurly Statement rcurly otherwise lcurly Statement rcurly

BoolCond ->  identifier leq intLiteral
		  | identifier geq intLiteral
		  | intLiteral leq identifier
		  | intLiteral geq identifier
		  | identifier leq identifier
		  | identifier geq identifier
		  | identifier leq floatLiteral
		  | identifier geq floatLiteral
		  | floatLiteral leq identifier
		  | floatLiteral geq identifier
